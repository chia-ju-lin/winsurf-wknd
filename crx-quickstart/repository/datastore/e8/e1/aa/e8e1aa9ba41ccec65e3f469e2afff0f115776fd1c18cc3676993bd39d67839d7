/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2016 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */
(function(document, $) {
    "use strict";

    var LINKSHARE_PARENT_PATHS_KEY = "linkshare.parent.paths";

    function getUrlParameter(sParam) {
        var sPageURL = window.location.search.substring(1);
        var sURLVariables = sPageURL.split("&");
        for (var i = 0; i < sURLVariables.length; i++) {
            var sParameterName = sURLVariables[i].split("=");
            if (sParameterName[0] === sParam) {
                return sParameterName[1];
            }
        }
        return "";
    }

    $(document).on("click", "coral-card", function(e) {
        var card = $(e.target).closest("coral-card");

        if (card.length < 1) {
            return;
        }

        var path = card.data("linkshare-path");

        updateParentPaths(path);

        var metaType = $(this.previousElementSibling).data("foundation-collection-meta-type");
        var href = $(this).data("linkshare-preview-navigation-href");
        if (metaType === "asset" && Granite.UI.Foundation.Utils.XSS.validUrlWithPrefix(href,
            "/linksharepreview.html/")) {
            window.location.href = Granite.HTTP.externalize(href);
        }
    });

    $(document).on("click", "td[is='coral-table-cell']", function(e) {
        var $target = $(e.target);
        var isRowSelect = typeof $target.attr("coral-table-rowselect") === "string" ||
            typeof $target.parent().attr("coral-table-rowselect") === "string";

        if (!isRowSelect) {
            var row = $(this.parentElement);
            var path = row.data("linkshare-path");

            updateParentPaths(path);

            var metaType = row.data("item-type");
            var href = row.data("linkshare-preview-navigation-href");
            if (metaType === "asset" && Granite.UI.Foundation.Utils.XSS.validUrlWithPrefix(href,
                "/linksharepreview.html/")) {
                window.location.href = Granite.HTTP.externalize(href);
            }
        }
    });

    function checkDownloadStatus(download) {
        var url = "/libs/dam/gui/content/assets/assetlinkshare.html/status.assetdownload.json?sh=" +
            getUrlParameter("sh") + "&id=" + download.id;
        $.ajax({
            url: url,
            success: function(status) {
                if (!status || status.length === 0) {
                    // eslint-disable-next-line no-console
                    console.warn("No download status found in response: " + JSON.stringify(status));
                    displayDownloadErrorModal();
                } else if (status.length === 1 && status[0].status === "SUCCESSFUL") {
                    window.open(Granite.HTTP.externalize("/libs/dam/gui/content/assets/assetlinkshare.html" +
                        status[0].downloadUrl), "_blank");
                    hideDownloadWaitModal();
                    clearQueuedDownload();
                } else {
                    if (Granite.Toggles.isEnabled("FT_ASSETS-38614")) {
                        setTimeout(function() {
                            checkDownloadStatus(download);
                        }, 1000);
                    } else {
                        displayDownloadSuccessModal(download);
                    }
                }
            },
            error: function(jqXhr, testStatus) {
                // eslint-disable-next-line no-console
                console.warn("Failed download response: " + testStatus);
                displayDownloadErrorModal();
            }
        });
    }

    function showInboxAction() {
        $("#downloads-inbox-action").show();
    }

    function getQueuedDownload() {
        var download = localStorage.getItem("com.adobe.aem.assets.adhocassetshare.downloads.queued");

        return download ? JSON.parse(download) : null;
    }

    function setQueuedDownload(download) {
        localStorage.setItem("com.adobe.aem.assets.adhocassetshare.downloads.queued", JSON.stringify(download));
    }

    function clearQueuedDownload() {
        localStorage.removeItem("com.adobe.aem.assets.adhocassetshare.downloads.queued");
    }

    function updateDownloads(newDownloads) {
        var now = Date.now();
        var downloads = [];
        var item = localStorage.getItem("com.adobe.aem.assets.adhocassetshare.downloads");
        if (item) {
            var savedDownloads = JSON.parse(item);
            savedDownloads.forEach(function(dl) {
                if (dl.expire > now) {
                    downloads.push(dl);
                }
            });
        }
        newDownloads.forEach(function(dl) {
            downloads.push(dl);
        });
        localStorage.setItem("com.adobe.aem.assets.adhocassetshare.downloads", JSON.stringify(downloads));

        showInboxAction();
    }

    function displayDownloadOptionsModal(options) {
        var dialog = document.querySelector("#download-options-dialog");

        $(dialog).data("options", options);

        dialog.show();
    }

    function displayDownloadErrorModal() {
        hideDownloadWaitModal();
        var dialog = new Coral.Dialog().set({
            id: "download-result-dialog",
            header: {
                innerHTML: Granite.I18n.get("Download Failed")
            },
            content: {
                innerHTML: Granite.I18n.get("Download request failed, please try again")
            },
            footer: {
                innerHTML: "<button is=\"coral-button\" variant=\"warning\" coral-close>" +
                    Granite.I18n.get("OK") + "</button>"
            }
        });
        document.body.appendChild(dialog);
        dialog.show();
    }

    function displayDownloadSuccessModal(download) {
        hideDownloadWaitModal();

        var downloadText;

        if (Granite.Toggles.isEnabled("FT_ASSETS-38614")) {
            downloadText = Granite.I18n.get("Your download has been added to the queue and will begin " +
                "automatically once ready. Open 'My Downloads' to track its progress.");
        } else {
            downloadText = Granite.I18n.get("Your download file(s) are being generated. Please check the " +
                "download inbox for updates.");
        }

        var dialog = new Coral.Dialog().set({
            id: "download-result-dialog",
            header: {
                innerHTML: Granite.I18n.get("Download Generation Started")
            },
            content: {
                innerHTML: downloadText
            },
            footer: {
                // TODO: replace with actual inbox URL
                innerHTML: "<button id=\"download-result-dialog-close\" is=\"coral-button\" " +
                    "variant=\"primary\" coral-close>" + Granite.I18n.get("OK") + "</button>"
            }
        });
        document.body.appendChild(dialog);

        if (Granite.Toggles.isEnabled("FT_ASSETS-38614")) {
            $(dialog).on("click", function() {
                // set current download id in local storage
                setQueuedDownload(download);
                checkDownloadStatus(download);
            });
        }

        dialog.show();
    }

    function displayDownloadWaitModal() {
        var wait = new Coral.Wait().set({
            size: "M",
            centered: true
        });

        var dialog = new Coral.Dialog().set({
            id: "download-wait-dialog",
            content: {
                innerHTML: "<div style=\"margin-top: 21px\"></div>"
            }
        });

        document.body.appendChild(dialog);
        var $content = $(dialog).find("coral-dialog-content > div");
        $content.append(wait);
        dialog.show();
    }

    function hideDownloadWaitModal() {
        var waiter = document.getElementById("download-wait-dialog");
        if (waiter) {
            waiter.remove();
        }
    }

    function showDownloadOptions(path) {
        $.ajax({
            url: "/libs/dam/gui/content/assets/assetlinkshare.html" + path[0] + ".downloadoptions.json",
            dataType: "json",
            data: {
                sh: getUrlParameter("sh"),
                path: path,
                _charset_: "utf-8"
            },
            success: function(data) {
                var options = {
                    sh: getUrlParameter("sh"),
                    path: path,
                    _charset_: "utf-8"
                };

                if (data.downloadOriginals && data.downloadRenditions) {
                    displayDownloadOptionsModal(options);
                } else {
                    startAsyncDownloadWithOptions(options);
                }
            },
            error: function() {
                displayDownloadErrorModal();
            }
        });
    }

    function startAsyncDownload(path) {
        displayDownloadWaitModal();
        $.ajax({
            type: "POST",
            url: "/libs/dam/gui/content/assets/assetlinkshare.html" + path[0] + ".assetdownload.json",
            data: {
                sh: getUrlParameter("sh"),
                path: path,
                _charset_: "utf-8",
                downloadAssets: "true",
                downloadRenditions: "true",
                downloadSubassets: "true",
                licenseCheck: "false"
            },
            success: function(data) {
                if (!data.downloads || data.downloads.length === 0) {
                    // eslint-disable-next-line no-console
                    console.warn("No downloads found in response: " + JSON.stringify(data));
                    displayDownloadErrorModal();
                }
                updateDownloads(data.downloads);
                if (data.downloads.length > 1) {
                    displayDownloadSuccessModal(data.downloads[0]);
                } else {
                    checkDownloadStatus(data.downloads[0]);
                }
            },
            error: function(jqXhr, testStatus) {
                // eslint-disable-next-line no-console
                console.warn("Failed download response: " + testStatus);
                displayDownloadErrorModal();
            },
            dataType: "json"
        });
    }

    function startAsyncDownloadWithOptions(options) {
        displayDownloadWaitModal();

        var path = options.path;

        $.ajax({
            type: "POST",
            url: "/libs/dam/gui/content/assets/assetlinkshare.html" + path[0] + ".assetdownload.json",
            data: options,
            success: function(data) {
                if (!data.downloads || data.downloads.length === 0) {
                    // eslint-disable-next-line no-console
                    console.warn("No downloads found in response: " + JSON.stringify(data));
                    displayDownloadErrorModal();
                }
                updateDownloads(data.downloads);
                displayDownloadSuccessModal(data.downloads[0]);
            },
            error: function(jqXhr, testStatus) {
                // eslint-disable-next-line no-console
                console.warn("Failed download response: " + testStatus);
                displayDownloadErrorModal();
            },
            dataType: "json"
        });
    }

    function downloadAssets(e, itemPath) {
        var path = [];
        var uniquePaths = [];
        // if not a quick action
        if (itemPath === undefined) {
            $(".foundation-selections-item").each(function() {
                path.push($(this).data("foundation-collection-item-id"));
            });
        } else {
            uniquePaths.push(itemPath);
        }

        for (var p = 0; p < path.length; p++) {
            if (uniquePaths.indexOf(path[p]) === -1) {
                uniquePaths.push(path[p]);
            }
        }

        path = uniquePaths;

        if (Granite.Toggles.isEnabled("FT_ASSETS-38614")) {
            showDownloadOptions(path);
        } else {
            startAsyncDownload(path);
        }
    }

    function updateParentPaths(currentPath) {
        var parentPaths = JSON.parse(sessionStorage.getItem(LINKSHARE_PARENT_PATHS_KEY));

        if (!parentPaths) {
            parentPaths = {};
        }

        var token = getUrlParameter("sh");
        var parentPathsForToken = parentPaths[token];

        if (!parentPathsForToken) {
            parentPathsForToken = {};
        }

        parentPathsForToken[currentPath] = getUrlParameter("path");
        parentPaths[token] = parentPathsForToken;

        sessionStorage.setItem(LINKSHARE_PARENT_PATHS_KEY, JSON.stringify(parentPaths));
    }

    function getParentPath(path) {
        var parentPaths = JSON.parse(sessionStorage.getItem(LINKSHARE_PARENT_PATHS_KEY));

        var token = getUrlParameter("sh");
        var parentPathsForToken = parentPaths[token];

        var parentPath = null;

        if (parentPathsForToken) {
            parentPath = parentPathsForToken[path];
        }

        return parentPath;
    }

    $(document).on("click", ".cq-damadmin-admin-actions-adhocassetshare-download-activator", function(e) {
        var activator = $(this);
        downloadAssets(e, activator.data("itempath"));
    });

    $(document).on("click", ".adhocassetshare-back", function() {
        if (Granite.Toggles.isEnabled("FT_ASSETS-38614")) {
            var parentPaths = JSON.parse(sessionStorage.getItem(LINKSHARE_PARENT_PATHS_KEY));

            if (parentPaths) {
                var href = "/linkshare.html?sh=" + getUrlParameter("sh");
                var path = getUrlParameter("path");
                var parentPath = getParentPath(path);

                if (parentPath && parentPath.length) {
                    href += "&path=" + parentPath;
                }

                window.location.href = Granite.HTTP.externalize(href);
            } else {
                // fallback
                window.history.back();
            }
        } else {
            window.history.back();
        }
    });

    $(document).on("click", "#download-options-form input[type=checkbox]", function() {
        if ($("input[type=checkbox]:checked").length === 0) {
            $("#download-options-form-submit").attr("disabled", "disabled");
        } else {
            $("#download-options-form-submit").removeAttr("disabled");
        }
    });

    $(document).on("click", "#download-options-form-submit", function(e) {
        var downloadOptionsDialog = $("#download-options-dialog");
        var options = downloadOptionsDialog.data("options");

        options.downloadOriginals = downloadOptionsDialog.find("input[name='downloadOriginals']")[0].checked;
        options.downloadRenditions = downloadOptionsDialog.find("input[name='downloadRenditions']")[0].checked;

        downloadOptionsDialog.hide();

        startAsyncDownloadWithOptions(options);
    });

    $(document).on("foundation-contentloaded", function(e) {
        // Hide the back button on the root of landing page
        var path = getUrlParameter("path");
        if ((path === undefined || path.length <= 0) && (window.location.pathname && window.location.pathname
            .indexOf("linksharepreview") < 0)) {
            $(".adhocassetshare-back").hide();
            $(".cq-damadmin-admin-actions-adhocassetshare-download-activator").hide();
        }

        // Hide the default close button shell properties page
        hideButton(document.getElementById("shell-propertiespage-closeactivator"));
        // Hide the default button in shell wizard
        hideButton(document.getElementsByClassName("foundation-wizard-control")[0]);
        hideButton(document.getElementsByClassName("foundation-wizard-control")[1]);
        $(".video-playback").on("click", function(event) {
            event.preventDefault();
            event.stopPropagation();

            var icon = $(event.target);
            var pauseIcon = new Coral.Icon().set({
                icon: "pauseCircle",
                size: "L"
            });
            var playIcon = new Coral.Icon().set({
                icon: "playCircle",
                size: "L"
            });

            if (icon.hasClass("dm-video-play")) {
                // trigger custom event registered to document
                $(document).trigger("dm-video-play", [ $(event.target) ]);
            } else {
                var video = $("video", event.currentTarget.parentElement).get(0);
                var iconParent;
                $(video).css("opacity", "1");
                if (icon.attr("icon") === "playCircle") {
                    iconParent = icon.parent();
                    icon.remove();
                    $(iconParent).append(pauseIcon);
                    $(video).css("opacity", "1");
                    video.play();
                } else {
                    iconParent = icon.parent();
                    icon.remove();
                    $(iconParent).append(playIcon);
                    video.pause();
                    $(video).css("opacity", "0.7");
                }
                /*
                * Using Jquery instead of native addEventListener to prevent multiple ended events
                * in case of calling removeEventListener
                */
                $(video).bind("ended", function() {
                    $(video).unbind("ended");
                    $(video).css("opacity", "0.7");
                    var iconParent = icon.parent();
                    icon.remove();
                    $(iconParent).append(playIcon);
                });

                $(video).bind("pause", function() {
                    $(video).css("opacity", "0.7");
                    var iconParent = icon.parent();
                    icon.remove();
                    $(iconParent).append(pauseIcon);
                });
            }
        });

        var queuedDownload = getQueuedDownload();

        if (queuedDownload) {
            setTimeout(function() {
                checkDownloadStatus(queuedDownload);
            }, 1000);
        }
    });

    // download button is added under primary actions & need to be shown/hidden upon selection change
    $(document).on("foundation-selections-change", function(e) {
        if ($(".foundation-selections-item").length > 0) {
            $(".cq-damadmin-admin-actions-adhocassetshare-download-activator").show();
        } else {
            $(".cq-damadmin-admin-actions-adhocassetshare-download-activator").hide();
        }
    });

    function hideButton(button) {
        if (button) {
            button.hidden = true;
        }
    }
})(document, Granite.$);
